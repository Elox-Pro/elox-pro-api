generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id           Int            @id @default(autoincrement())
  updatedAt    DateTime       @updatedAt @map("updated_at")
  createdAt    DateTime       @default(now()) @map("created_at")
  name         String         @unique
  imageUrl     String?        @map("image_url")
  loanSettings LoanSettings[]
  users        User[]

  @@map("companies")
}

model User {
  id             Int            @id @default(autoincrement())
  updatedAt      DateTime       @updatedAt @map("updated_at")
  createdAt      DateTime       @default(now()) @map("created_at")
  role           Role           @default(COMPANY_CUSTOMER)
  username       String         @unique
  email          String         @unique
  password       String
  phone          String?        @unique
  gender         Gender?
  avatarUrl      String?        @map("avatar_url")
  emailVerified  Boolean        @default(false) @map("email_verified")
  phoneVerified  Boolean        @default(false) @map("phone_verified")
  tfaType        TfaType        @default(NONE) @map("tfa_type")
  lastLoginAt    DateTime?      @map("last_login_at")
  companyId      Int?           @map("company_id")
  firstName      String?        @map("first_name")
  lastName       String?        @map("last_name")
  KYC            KYC?
  addresses      Address[]
  auditTrails    AuditTrail[]
  loans          Loan[]
  guarantorLoans Loan[]         @relation("loans_as_guarantor")
  bankAccounts   BankAccount[]
  contacts       UserContact?
  customerRank   UserRank?
  company        Company?       @relation(fields: [companyId], references: [id])
  documents      UserDocument[]

  @@index([companyId], map: "users_company_id_fkey")
  @@map("users")
}

model UserDocument {
  id               Int              @id @default(autoincrement())
  updatedAt        DateTime         @updatedAt @map("updated_at")
  createdAt        DateTime         @default(now()) @map("created_at")
  type             UserDocumentType
  value            String?
  description      String?          @db.Text
  documentFrontUrl String?          @map("document_front_url")
  documentBackUrl  String?          @map("document_back_url")
  userId           Int              @map("user_id")
  user             User             @relation(fields: [userId], references: [id])

  @@index([userId], map: "users_documents_user_id_fkey")
  @@map("users_documents")
}

model Address {
  id               Int         @id @default(autoincrement())
  updatedAt        DateTime    @updatedAt @map("updated_at")
  createdAt        DateTime    @default(now()) @map("created_at")
  streetAddress    String      @map("street_address")
  apartamentNumber String?     @map("apartament_number")
  city             String
  state            String
  zipCode          String      @map("zip_code")
  type             AddressType @default(HOME)
  isDefault        Boolean     @default(false) @map("is_default")
  userId           Int         @map("user_id")
  countryId        Int         @map("country_id")
  country          Country     @relation(fields: [countryId], references: [id])
  user             User        @relation(fields: [userId], references: [id])

  @@index([countryId], map: "addresses_country_id_fkey")
  @@index([userId], map: "addresses_user_id_fkey")
  @@map("addresses")
}

model Country {
  id        Int       @id @default(autoincrement())
  updatedAt DateTime  @updatedAt @map("updated_at")
  createdAt DateTime  @default(now()) @map("created_at")
  name      String    @unique
  iso2      String
  e164      Int
  ccy       String?
  lang      String?
  addresses Address[]

  @@map("countries")
}

model BankAccount {
  id            Int         @id @default(autoincrement())
  updatedAt     DateTime    @updatedAt @map("updated_at")
  createdAt     DateTime    @default(now()) @map("created_at")
  bankName      String      @map("bank_name")
  accountNumber String      @unique @map("account_number")
  accountType   AccountType @default(SAVINGS) @map("account_type")
  isActive      Boolean     @default(true) @map("is_active")
  isPrimary     Boolean     @default(false) @map("is_primary")
  iban          String?     @unique
  bic           String?     @unique
  userId        Int         @map("user_id")
  user          User        @relation(fields: [userId], references: [id])

  @@index([userId], map: "user_bank_accounts_user_id_fkey")
  @@map("user_bank_accounts")
}

model KYC {
  id               Int       @id @default(autoincrement())
  updatedAt        DateTime  @updatedAt @map("updated_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  verified         Boolean   @default(false)
  rejected         Boolean   @default(false)
  rejectionReason  String?   @map("rejection_reason")
  verificationDate DateTime? @map("verification_date")
  userId           Int       @unique @map("user_id")
  user             User      @relation(fields: [userId], references: [id])

  @@map("KYCs")
}

model UserContact {
  id           Int                 @id @default(autoincrement())
  updatedAt    DateTime            @updatedAt @map("updated_at")
  createdAt    DateTime            @default(now()) @map("created_at")
  type         ContactType
  relationship ContactRelationship
  userId       Int                 @unique @map("user_id")
  user         User                @relation(fields: [userId], references: [id])

  @@map("user_contacts")
}

model Rank {
  id            Int        @id @default(autoincrement())
  updatedAt     DateTime   @updatedAt @map("updated_at")
  createdAt     DateTime   @default(now()) @map("created_at")
  name          String     @unique
  minimumPoints Int        @map("minimum_points")
  description   String?    @db.Text
  imageUrl      String?    @map("image_url")
  userRanks     UserRank[]

  @@map("ranks")
}

model UserRank {
  id               Int               @id @default(autoincrement())
  updatedAt        DateTime          @updatedAt @map("updated_at")
  createdAt        DateTime          @default(now()) @map("created_at")
  points           Int
  userId           Int               @unique @map("user_id")
  rankId           Int               @map("rank_id")
  rankTransactions RankTransaction[]
  rank             Rank              @relation(fields: [rankId], references: [id])
  user             User              @relation(fields: [userId], references: [id])

  @@index([rankId], map: "user_ranks_rank_id_fkey")
  @@map("user_ranks")
}

model RankTransaction {
  id           Int                 @id @default(autoincrement())
  updatedAt    DateTime            @updatedAt @map("updated_at")
  createdAt    DateTime            @default(now()) @map("created_at")
  type         RankTransactionType
  pointsEarned Int                 @map("points_earned")
  description  String?             @db.Text
  details      Json?
  userRankId   Int                 @map("user_rank_id")
  userRank     UserRank            @relation(fields: [userRankId], references: [id])

  @@index([userRankId], map: "rank_transactions_user_rank_id_fkey")
  @@map("rank_transactions")
}

model Loan {
  id                  Int                  @id @default(autoincrement())
  updatedAt           DateTime             @updatedAt @map("updated_at")
  createdAt           DateTime             @default(now()) @map("created_at")
  applicationDate     DateTime             @map("application_date")
  approvedDate        DateTime?            @map("approved_date")
  amount              Decimal              @db.Decimal(10, 2)
  interestRate        Decimal              @map("interest_rate") @db.Decimal(5, 2)
  monthlyInterestRate Decimal              @map("monthly_interest_rate") @db.Decimal(5, 2)
  term                Int
  repaymentFrequency  PaymentFrequency     @default(MONTHLY) @map("repayment_frequency")
  status              LoanStatus           @default(PENDING)
  enabledlateFee      Boolean              @default(false) @map("enabled_late_fee")
  closedDate          DateTime?            @map("closed_date")
  pastDueStage        PastDueStage?        @map("past_due_stage")
  collectionStatus    LoanCollectionStatus @map("collection_status")
  defaultDate         DateTime?            @map("default_date")
  notes               String?              @map("notes") @db.Text
  customerId          Int                  @map("customer_id")
  settingsId          Int                  @map("settings_id")
  guarantorId         Int                  @map("guarantor_id")
  collaterals         LoanCollateral[]
  documents           LoanDocument[]
  repayments          LoanRepayment[]
  schedules           LoanSchedule[]
  customer            User                 @relation(fields: [customerId], references: [id])
  guarantor           User                 @relation("loans_as_guarantor", fields: [guarantorId], references: [id])
  settings            LoanSettings         @relation(fields: [settingsId], references: [id])

  @@index([customerId], map: "loans_customer_id_fkey")
  @@index([guarantorId], map: "loans_guarantor_id_fkey")
  @@index([settingsId], map: "loans_settings_id_fkey")
  @@map("loans")
}

model LoanSettings {
  id                Int      @id @default(autoincrement())
  updatedAt         DateTime @updatedAt @map("updated_at")
  createdAt         DateTime @default(now()) @map("created_at")
  name              String
  description       String?  @db.Text
  loanType          LoanType @default(PERSONAL) @map("loan_type")
  lateFeePercentage Decimal  @map("late_fee_percentage") @db.Decimal(5, 2)
  gracePeriodDays   Int      @map("grace_period_days")
  defaultDatePeriod Int      @map("default_date_period")
  companyId         Int      @map("company_id")
  company           Company  @relation(fields: [companyId], references: [id])
  loan              Loan[]

  @@index([companyId], map: "loan_settings_company_id_fkey")
  @@map("loan_settings")
}

model LoanRepayment {
  id                   Int           @id @default(autoincrement())
  updatedAt            DateTime      @updatedAt @map("updated_at")
  createdAt            DateTime      @default(now()) @map("created_at")
  paymentDate          DateTime      @map("payment_date")
  amount               Decimal       @db.Decimal(10, 2)
  principalAmount      Decimal       @map("principal_amount") @db.Decimal(10, 2)
  interestAmount       Decimal       @map("interest_amount") @db.Decimal(10, 2)
  lateFeeAmount        Decimal       @map("late_fee_amount") @db.Decimal(10, 2)
  paymentMethod        PaymentMethod @map("payment_method")
  transactionReference String        @map("transaction_reference")
  transactionUrl       String?       @map("transaction_url")
  notes                String?       @db.Text
  loanId               Int           @map("loan_id")
  loan                 Loan          @relation(fields: [loanId], references: [id])

  @@index([loanId], map: "loan_repayments_loan_id_fkey")
  @@map("loan_repayments")
}

model LoanSchedule {
  id                Int           @id @default(autoincrement())
  updatedAt         DateTime      @updatedAt @map("updated_at")
  createdAt         DateTime      @default(now()) @map("created_at")
  installmentNumber Int           @map("installment_number")
  dueDate           DateTime      @map("due_date")
  principalAmount   Decimal       @map("principal_amount") @db.Decimal(10, 2)
  interestAmount    Decimal       @map("interest_amount") @db.Decimal(10, 2)
  lateFeeAmount     Decimal       @map("late_fee_amount") @db.Decimal(10, 2)
  totalPayment      Decimal       @map("total_payment") @db.Decimal(10, 2)
  paymentStatus     PaymentStatus @default(PENDING) @map("payment_status")
  paidDate          DateTime      @map("paid_date")
  loanId            Int           @map("loan_id")
  loan              Loan          @relation(fields: [loanId], references: [id])

  @@index([loanId], map: "loan_schedules_loan_id_fkey")
  @@map("loan_schedules")
}

model LoanCollateral {
  id             Int                @id @default(autoincrement())
  updatedAt      DateTime           @updatedAt @map("updated_at")
  createdAt      DateTime           @default(now()) @map("created_at")
  type           LoanCollateralType
  description    String?            @db.Text
  estimatedValue Decimal            @map("estimated_value") @db.Decimal(10, 2)
  loanId         Int                @map("loan_id")
  loan           Loan               @relation(fields: [loanId], references: [id])

  @@index([loanId], map: "loan_collaterals_loan_id_fkey")
  @@map("loan_collaterals")
}

model LoanDocument {
  id          Int              @id @default(autoincrement())
  updatedAt   DateTime         @updatedAt @map("updated_at")
  createdAt   DateTime         @default(now()) @map("created_at")
  type        LoanDocumentType
  value       String
  documentUrl String
  description String?          @db.Text
  loanId      Int              @map("loan_id")
  loan        Loan             @relation(fields: [loanId], references: [id])

  @@index([loanId], map: "loan_documents_loan_id_fkey")
  @@map("loan_documents")
}

model AuditTrail {
  id          Int              @id @default(autoincrement())
  updatedAt   DateTime         @updatedAt @map("updated_at")
  createdAt   DateTime         @default(now()) @map("created_at")
  action      AuditTrailAction
  resource    String
  resource_id Int              @map("resource_id")
  ipAddress   String           @map("ip_address")
  userAgent   String           @map("user_agent")
  details     Json?
  userId      Int              @map("user_id")
  user        User             @relation(fields: [userId], references: [id])

  @@index([userId], map: "audit_trails_user_id_fkey")
  @@map("audit_trails")
}

model Avatar {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  url       String   @unique

  @@map("avatars")
}

enum Role {
  SYSTEM_ADMIN
  COMPANY_OWNER
  COMPANY_ADMIN
  COMPANY_CUSTOMER
}

enum Gender {
  MALE
  FEMALE
}

enum TfaType {
  NONE
  EMAIL
  SMS
  GOOGLE_TFA
}

enum UserDocumentType {
  ID_CARD
  PASSPORT
  ADDRESS
  SELFIE
}

enum AddressType {
  HOME
  WORK
  BILLING
}

enum AccountType {
  SAVINGS
  CHECKING
  LOAN
}

enum ContactType {
  PERSONAL
  FAMILIAR_REFERENCE
  SPONSOR
}

enum ContactRelationship {
  PAREN
  CHILD
  BROTHER
  FRIEND
  COWORKER
}

enum RankTransactionType {
  LOAN_APPLICATION
  REPAYMENT
  REFERRAL_BONUS
}

enum PaymentFrequency {
  DAILY
  WEEKLY
  BI_WEEKLY
  MONTHLY
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  CLOSED
  PAST_DUE
}

enum PastDueStage {
  EARLY
  LATE
  SEVERE
}

enum LoanCollectionStatus {
  INITIATED
  ONGOING
  SETTLED
}

enum LoanType {
  PERSONAL
  AUTO
  MORTGAGE
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  CASH
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

enum LoanCollateralType {
  PROPERTY
  VEHICLE
  STOCK
}

enum LoanDocumentType {
  LOAN_AGREEMENT
  PROMISORY_NOTE
  COLLATERAL_DOCUMENT
}

enum AuditTrailAction {
  CREATE
  READ
  UPDATE
  DELETE
}
